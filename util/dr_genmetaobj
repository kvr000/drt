#!/usr/bin/perl

###
## drt library
##
## drt multiplatform development toolkit
##
## ----------------------------------------------------------------------------------
##
## Copyright (C) 2004-2009 Zbyněk Vyškovský
##
## ----------------------------------------------------------------------------------
##
## LICENSE:
##
## This file is part of drt
##
## drt is free software; you can redistribute it and/or modify it under the
## terms of the GNU Lesser General Public License as published by the Free
## Software Foundation; either version 3 of the License, or (at your option)
## any later version.
##
## drt is distributed in the hope that it will be useful, but WITHOUT ANY
## WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
## FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
## more details.
##
## You should have received a copy of the GNU Lesser General Public License
## along with drt; if not, write to the Free Software Foundation, Inc., 51
## Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
##
## @copyright	2004-2009 Zbyněk Vyškovský
## @link	mailto:kvr@matfyz.cz
## @link	http://kvr.matfyz.cz/drt/
## @license	http://www.gnu.org/licenses/lgpl.txt GNU Lesser General Public License v3
###

use strict;
use warnings;

use FileHandle;
use Data::Dumper;
use Getopt::Std;
use File::Basename;
use DB_File;

use lib dirname($0)."/perl";
use dr::FileTransaction;
use dr::FileParser;
use dr::GenmapReader;
use dr::ModelStore;
use dr::Util qw(defvalue tabalign dumpSimple);


sub fixModelInfo($)
{
	my $model		= shift;

	if (defined $model->{db_table}) {
		# ok
	}
	elsif (defined (my $db_table = $model->checkDrTagValue("db_table"))) {
		$model->{db_table} = $db_table;
	}
	else {
		($model->{db_table} = $model->{name}); # =~ s/([[:lower:]])([[:upper:]])/$1_$2/g;
		#$model->{db_table} = lc($model->{db_table});
	}
}

our %opts;
getopts('', \%opts);

die "Usage: $0 list_file touch_file root" unless (@ARGV == 3);
my $listname = shift(@ARGV);
my $touch_name = shift(@ARGV);
my $root = shift(@ARGV);
die "passed file does not end with suffix .list or .db" unless ($listname =~ m/(.*)\.(db|list)$/);

our $file_trans = dr::FileTransaction->new();

our $model_store = dr::ModelStore->new();
$model_store->registerFixier(\&fixModelInfo);


sub readModel($$)
{
	my $location		= shift;
	my $name		= shift;

	my $model = $model_store->loadModel($location, $name);

	return $model;
}

our %FORM_UML_TYPES_PRIM = (
	Boolean			=> "bool",
	Integer			=> "int",
	Long			=> "bigint",
	long			=> "bigint",
	int			=> "int",
	float			=> "float",
	Integer			=> "int",
);

our %FORM_UML_TYPES_VAR = (
	string			=> "string",
	binary			=> "string",
);

sub dieAttrContext($$)
{
	my $attr		= shift;
	my $msg			= shift;

	dr::Util::doDie("$attr->{owner}->{filename}:0: $attr->{owner}->{full}.$attr->{name}: $msg");
}

sub translateFormType($)
{
	my $attr		= shift;

	eval {
		my ( $type, $tagger ) = $attr->getFinalTypeWithTagger();

		if ($type->{stype} eq "primitive") {
			my $ptype = $type->{type};
			if ($ptype =~ m/^(\w+)\((\d+)\)$/) {
				if (my $sqlt = $FORM_UML_TYPES_VAR{$1}) {
					return "$sqlt($2)";
				}
				die "cannot map $ptype";
			}
			else {
				if (my $sqlt = $FORM_UML_TYPES_PRIM{$ptype}) {
					return $sqlt;
				}
				die "cannot map $ptype";
			}
		}
		elsif ($type->{stype} eq "enum") {
			return "int";
		}
		else {
			die "unknown stype $type->{stype} for class $type->{full}";
		}
	}
		or dieAttrContext($attr, $@);
}

sub printActionOptional
{
	my $formfile		= shift;
	my $action		= shift;
	my $name		= shift;

	if (defined (my $v = $action->checkDrTagValue($name))) {
		$formfile->print(tabalign("\t$name", 24).$v."\n");
		return 1;
	}
	return 0;
}

my $lineno = 0;

my @models = ();

my $errors = 0;

my $list = dr::GenmapReader::open($listname, "metaobj");
while (my ($section, $classname) = $list->getNext()) {
	eval {
		push(@models, readModel($section, $classname));
		1;
	}
		or $errors++, STDERR->print($@ =~ m/^\S+:\d+:/ ? $@ : $list->getContext().": $@");
}


foreach my $model (@models) {
	my $file = $model->{full}; $file =~ s/::/\//g;
	my $form = $file_trans->updateChanged("$root/$file.metaobj");
	eval {
		$form->print(tabalign("db_table", 16).$model->{db_table}."\n");
		if (!$model->checkDrTagValue("virtual")) {
			foreach (qw(req_get req_set req_new req_del)) {
				$form->print(tabalign("$_", 16).$model->getDrTagValue($_)."\n");
			}
		}
		else {
			foreach (qw(req_get req_set req_new req_del)) {
				$form->print(tabalign("$_", 16)."guest\n");
			}
		}
		foreach (qw(trigger_set trigger_new trigger_del)) {
			if (defined (my $v = $model->checkDrTagValue($_))) {
				$form->print(tabalign("$_", 16).$model->getDrTagValue($_)."\n");
			}
		}
		foreach (qw(order)) {
			if (defined (my $v = $model->checkDrTagValue($_))) {
				$form->print(tabalign("$_", 16).$model->getDrTagValue($_)."\n");
			}
		}
		1;
	}
		or STDERR->print("failed to process $model->{full}:\n$@"), $errors++;
	foreach my $view (@{$model->{view_list}}) {
		eval {
			$form->print(tabalign("view", 16).$view->{name}."\n");
			foreach (qw(nocompos suggest supplier renderer addcompos iniclass gui_filter view_attrs)) {
				if (defined (my $v = $view->checkDrTagValue($_))) {
					$form->print(tabalign("\t$_", 24).$v."\n")
				}
			}
			1;
		}
			or STDERR->print("failed to process $model->{full}.$view->{name}:\n$@"), $errors++;
	}
	foreach my $attr (@{$model->{attr_list}}) {
		eval {
			$form->print(tabalign($attr->{stype}, 16).$attr->{name}."\n");
			foreach (qw(db_name)) {
				if (defined (my $v = $attr->checkDrTagValue($_))) {
					$form->print(tabalign("\t$_", 24).$v."\n");
				}
			}
			foreach (qw(req_sys req_mode)) {
				$form->print(tabalign("\t$_", 24).defvalue($attr->checkDrTagValue($_), "")."\n");
			}
			if (defined (my $req_view = $attr->checkDrTagValue("req_view"))) {
				$form->print(tabalign("\treq_view", 24).$req_view."\n");
			}
			else {
				$form->print(tabalign("\treq_view", 24).($attr->{stype} eq "child" ? "__explicit__" : "")."\n");
			}
			foreach (qw(req_get req_set req_new)) {
				if (defined (my $v = $attr->checkDrTagValue($_))) {
					$form->print(tabalign("\t$_", 24).$v."\n");
				}
			}
			$form->print(tabalign("\tmandatory", 24).$attr->{mandatory}."\n");
			my $roles = defvalue($attr->checkDrTagValue("role"), "")."";
			$roles .= "," if ($roles ne "");
			$roles .= "serial," if ($attr->checkDrTagValue("serial"));
			$roles .= "compos," if ($attr->{stype} eq "compos");
			$roles = substr($roles, 0, -1);
			$form->print(tabalign("\trole", 24).$roles."\n");
			$form->print(tabalign("\tforce_new", 24).$attr->getDrTagValue("force_new")."\n") if ($attr->checkDrTagValue("force_new"));
			if ($attr->{stype} eq "attr") {
				my ( $type, $tagger ) = $attr->getFinalTypeWithTagger();
				foreach (qw(db_conversion db_precision do_mandatory align gui_init)) {
					if (defined (my $val = $tagger->checkTagValue($_))) {
						$form->print(tabalign("\t$_", 24).$val."\n");
					}
				}
				$form->print(tabalign("\ttext", 24).defvalue($tagger->checkTagValue("text"), $attr->{name})."\n");
				$form->print(tabalign("\ttype", 24).translateFormType($attr)."\n");
				$form->print(tabalign("\tlogical", 24).$tagger->getTag("logical")->{value}."\n");
				$form->print(tabalign("\tdisplay", 24).$tagger->getTag("display")->{value}."\n");
				if (defined (my $handling = $tagger->checkTagValue("handling"))) {
					$form->print(tabalign("\thandling", 24).$handling."\n");
				}
			}
			elsif ($attr->{stype} eq "assoc") {
				my @tprimary = $attr->expandAssocAttrs();
				die "association references more than one attribute, not yet supported" if (@tprimary != 1);
				my ( $type, $tagger ) = $tprimary[0]->{attr}->getFinalTypeWithTagger();
				$tagger->mergeReplacing($attr->getDrTagger());
				$form->print(tabalign("\tref", 24).$attr->{ref}."\n");
				$form->print(tabalign("\ttext", 24).defvalue($tagger->checkTagValue("text"), $attr->{name})."\n");
				$form->print(tabalign("\ttype", 24).translateFormType($attr)."\n");
				$form->print(tabalign("\tref_display", 24).$tagger->getTagValue("ref_display")."\n") if ($tagger->checkTag("ref_display"));
				$form->print(tabalign("\tlogical", 24).$tagger->getTag("logical")->{value}."\n");
				$form->print(tabalign("\tdisplay", 24).$tagger->getTag("display")->{value}."\n");
			}
			elsif ($attr->{stype} eq "compos") {
				$form->print(tabalign("\tref", 24).$attr->{ref}."\n");
				$form->print(tabalign("\ttext", 24).defvalue($attr->checkDrTagValue("text"), $attr->{name})."\n");
			}
			elsif ($attr->{stype} eq "child") {
				$form->print(tabalign("\tref", 24).$attr->{ref}."\n");
				$form->print(tabalign("\ttext", 24).defvalue($attr->checkDrTagValue("text"), $attr->{name})."\n");
			}
			else {
				dr::Util::doDie("unknown stype $attr->{stype}:\n".dumpSimple($attr)."\n");
			}
			1;
		}
			or STDERR->print("failed to process $model->{full}.$attr->{name}:\n$@"), $errors++;
	}
	foreach my $assoc_display (values %{$model->getDrSpecs("assoc_display")}) {
		eval {
			$form->print(tabalign("assoc_display", 16).$assoc_display->{spec}."\n");
			die "incorrect format for assoc_display, expected display_type(col0,...): $assoc_display->{value}" unless ($assoc_display->{value} =~ m/^(\w+)\(((\w+,)*(\w+))\)$/);
			my ($dtype, $dcols) = ( $1, $2 );
			$form->print(tabalign("\tdisplay", 24).$dtype."\n");
			$form->print(tabalign("\tcolumns", 24).$dcols."\n");
			1;
		}
			or STDERR->print("failed to process $model->{full}.$assoc_display->{name}:\n$@"), $errors++;
	}
	foreach my $action (@{$model->{action_list}}) {
		eval {
			$form->print(tabalign("action", 16).$action->{name}."\n");
			$form->print(tabalign("\ttext", 24).defvalue($action->checkDrTagValue("text"), $action->{name})."\n");
			$form->print(tabalign("\tclassify", 24).join(",", keys %{$action->{classify}})."\n");
			$form->print(tabalign("\treq_role", 24).$action->getDrTagValue("req_role")."\n");
			foreach (qw(req_sys req_view gui_def gui_actions nocompos)) {
				if (defined (my $v = $action->checkDrTagValue($_))) {
					$form->print(tabalign("\t$_", 24).$v."\n")
				}
			}
			printActionOptional($form, $action, "form_mode");
			printActionOptional($form, $action, "form_name");
			printActionOptional($form, $action, "form_view");
			printActionOptional($form, $action, "actioner");
			printActionOptional($form, $action, "options");
			if (defined (my $form_actioner = $action->checkDrTagValue("form_actioner"))) {
				my $a = $form_actioner eq "_" ? "$model->{full}_$action->{name}" : index($form_actioner, "_") == 0 ? "$model->{full}$form_actioner" : $form_actioner;
				$form->print(tabalign("\tform_actioner", 24).$a."\n");
			}
			1;
		}
			or STDERR->print("failed to process $model->{full}.$action->{name}:\n$@"), $errors++;
	}
	foreach my $accfilter (sort({ $a->{order} <=> $b->{order} } values %{$model->getDrSpecs("accfilter")})) {
		eval {
			$form->print(tabalign("accfilter", 16).$accfilter->{spec}."\n");
			$form->print(tabalign("\tcontent", 24).$accfilter->{value}."\n");
		}
			or STDERR->print("failed to process $model->{full}.$accfilter->{name}:\n$@"), $errors++;
	}
	foreach my $check (sort({ $a->{order} <=> $b->{order} } values %{$model->getDrSpecs("check")})) {
		eval {
			$form->print(tabalign(tabalign("check", 16).$check->{spec}, 24).$check->{value}."\n");
		}
			or STDERR->print("failed to process $model->{full}.$check->{name}:\n$@"), $errors++;
	}
	$file_trans->closeFile($form);
}

die "Unrecoverable errors occurred" if ($errors);

if ($errors == 0) {
	$file_trans->createTruncated($touch_name);
}
else {
	die "fatal errors occurred";
}

if ($file_trans->commit()) {
}
